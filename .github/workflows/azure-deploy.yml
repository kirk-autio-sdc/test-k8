name: Setup Azure Resources

on:
  workflow_dispatch:
  push:
    branches:
      - main
    
env:
  RESOURCE_GROUP: test-k8-rg
  AKS_NAME: test-k8-aks
    
jobs:
  setup-azure:
    runs-on: ubuntu-latest
  
      
    steps:
      - name: Get code
        uses: actions/checkout@v4

      - name: Login to Azure using Service Principal
        run: |
          az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password ${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Create Resource Group
        run: |
          RG_EXISTS=$(az group exists --name $RESOURCE_GROUP)

          # Create the Resource Group if it does not exist
          if [ "$RG_EXISTS" = false ]; then
            echo "Resource group $RESOURCE_GROUP does not exist. Creating now..."
            az group create --name $RESOURCE_GROUP --location canadaeast
          fi
          
      - name: Install AKS if it doesn't exist
        run: |
          # Check if AKS exists
          AKS_EXISTS=$(az aks list --resource-group $RESOURCE_GROUP --query "[?name=='$AKS_NAME'].name" -o tsv)
          
          if [ -z "$AKS_EXISTS" ]; then
            echo "AKS resource does not exist.  Creating now..."
            az aks create \
              --resource-group $RESOURCE_GROUP \
              --name $AKS_NAME \
              --node-count 1 \
              --node-vm-size A2_v2 \
              --enable-addons monitoring \
              --generate-ssh-keys
          fi

      - name: Install kubelogin
        uses: azure/use-kubelogin@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          kubelogin-version: 'latest'
        
      - name: Set AKS context
        run: |
          az aks get-credentials --resource-group $RESOURCE_GROUP --name $AKS_NAME --overwrite-existing

      - name: Set up kubelogin for non-interactive login
        run: |
          kubelogin convert-kubeconfig -l azurecli
          
      - name: Install Cert Manager using Helm
        run: |
          helm repo add jetstack https://charts.jetstack.io --force-update
          helm upgrade --install cert-manager jetstack/cert-manager \
            --namespace cert-manager \
            --create-namespace \
            --set crds.enabled=true              
          
      - name: Install ASO using Helm
        run: |
          helm repo add aso2 https://raw.githubusercontent.com/Azure/azure-service-operator/main/v2/charts
          helm repo update
          helm upgrade --install azure-service-operator aso2/azure-service-operator \
            --create-namespace \
            --namespace aso-system \
            --set crds.enabled=true \
            --set crdPattern='resources.azure.com/*;containerservice.azure.com/*;keyvault.azure.com/*;managedidentity.azure.com/*;eventhub.azure.com/*;documentdb.azure.com/*'                           
        
      - name: Store values in secret file if not already existing
        run: |
          SECRET_NAME="aso-credential"
          NAMESPACE="aso-system"
          if ! kubectl get secret "$SECRET_NAME" -n "$NAMESPACE" > /dev/null 2>&1; then          
            kubectl create secret generic "$SECRET_NAME" \
              --namespace "$NAMESPACE" \
              --from-literal=AZURE_CLIENT_ID=${{secrets.AZURE_CLIENT_ID}} \
              --from-literal=AZURE_CLIENT_SECRET=${{secrets.AZURE_CLIENT_SECRET}} \
              --from-literal=AZURE_TENANT_ID=${{secrets.AZURE_TENANT_ID}} \
              --from-literal=AZURE_SUBSCRIPTION_ID=${{secrets.AZURE_SUBSCRIPTION_ID}}
          fi
          
      - name: Install NGINX
        run: |
          helm upgrade --reuse-values --install nginx-ingress ingress-nginx/ingress-nginx --namespace ingress-basic --create-namespace      
      
      - name: Apply K8 manifests
        run: |
          kubectl apply -f workflows/aso.yml

      - name: Verify ASO Resources
        run: |
          kubectl -n aso-system get all
          
      - name: Login to Container Registry
        run: |
          az acr login --name asdccontainer

      - name: Build K8Test image
        working-directory: K8Test
        run: |
          docker build -t asdccontainer.azurecr.io/k8test-api .
          docker push asdccontainer.azurecr.io/k8test-api
          
      - name: Build K8OtherApi image
        working-directory: K8OtherAPI
        run: |
          docker build -t asdccontainer.azurecr.io/k8other-api .
          docker push asdccontainer.azurecr.io/k8other-api
          
      - name: Deploy API manifests
        run: |
          kubectl apply -f workflows/deployments.yml
          kubectl apply -f workflows/services.yml
          
    